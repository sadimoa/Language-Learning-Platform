// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @unique @default(uuid())
  firstName String
  lastName  String?
  email     String   @unique
  password  String
  role      Role     @default(user)
  lessonCompletedCount Int @default(0)
  proficiency           String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson         Lesson[]
  answers        Answer[]
  Result         Result[]
  ExerciseResult ExerciseResult[]
  ExerciseAnswer ExerciseAnswer[]
  progress Progress[]
  
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
}

enum Role {
  admin
  user
}

model Lesson {
  id           String    @id @unique @default(uuid())
  title        String
  videoUrl     String
  content      String
  language     String
  lessonNum Int
  isPublished  Boolean   @default(false)
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  quiz      Quiz[]
  exercises Exercise[]
  progress Progress[]

}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons Lesson[]
}

model Quiz {
  id            Int      @id @default(autoincrement())
  question      String
  answerChoices Json
  correctAnswer Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lessonId String
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  answers  Answer[]
  Results  Result[]
  progress Progress[]

}

model Answer {
  id          Int      @id @default(autoincrement())
  answer      Int
  submittedAt DateTime @default(now())
  isCorrect Boolean
  userId String
  user   User   @relation(fields: [userId], references: [id])
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

model Result {
  id     Int    @id @default(autoincrement())
  point  Int
  userId String
  user   User   @relation(fields: [userId], references: [id])
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

model Exercise {
  id        Int      @id @default(autoincrement())
  question  String
  options   Json
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessonId       String
  lesson         Lesson           @relation(fields: [lessonId], references: [id])
  exerciseAnswer ExerciseAnswer[]
  ExerciseResult ExerciseResult[]
  progress Progress[]
}

model ExerciseAnswer {
  id        Int     @id @default(autoincrement())
  answer    String
  isCorrect Boolean
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseResult {
  id         Int      @id @default(autoincrement())
  point      Int
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}


model Progress {
  id           Int      @id @default(autoincrement())
  userId       String
  lessonId     String
  quizId       Int
  exerciseId   Int
  isCompleted Boolean
  score        Int
  user         User     @relation(fields: [userId], references: [id])
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
  quiz         Quiz     @relation(fields: [quizId], references: [id])
  exercise     Exercise @relation(fields: [exerciseId], references: [id])
}


model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  senderId    String
  receiverId  String
}
